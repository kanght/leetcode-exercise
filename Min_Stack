155. Min Stack
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {
       
    }
    
    void push(int x) {
        m_Stack.push(x);
        if(m_minStack.empty()){
            m_minStack.push(x);
        } else if (x < m_minStack.top()) {    ////here missing a = condition, i.e. x<=top, we should push it, not just <, but also =
            m_minStack.push(x);
        }
    }
    
    void pop() {

        if(m_Stack.top()==m_minStack.top()) {
            m_minStack.pop();
        }
        m_Stack.pop();
    }
    
    int top() {
        return m_Stack.top();
    }
    
    int getMin() {
        return    m_minStack.top();
    }
private: 
    stack<int> m_Stack;
    stack<int> m_minStack;
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 **/
 
 
 note: there is no need to change the construct function, as the stack is STL, so just define the member variable for that type of stack.
 note: there is top instead of peek function to get the value without pop.
